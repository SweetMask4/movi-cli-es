#!/bin/bash

# Exit if any command fails, if any undefined variable is used, or if a pipeline fails
# set -euo pipefail

# Script para buscar y reproducir pel√≠culas, series y anime de Cuevana3

# Dependencias requeridas: mpv, yt-dlp, fzf, curl, ffmpeg

others_base_url="https://cuevana3.ch"
anime_base_url="https://monoschinos2.com"
doramas_base_url="https://www.doramasyt.com"
spn_search_endpoint="/buscar?q="
eng_search_endpoint="/search.html?keyword="
hist_dir="$HOME/.local/state/movie-cli-es"
histfile="$hist_dir/movie-hsts"
history="$hist_dir/history"
dir_downloads="$HOME/Downloads/movi"
agent="Mozilla/5.0 (Windows NT 6.1; Win64; rv:109.0) Gecko/20100101 Firefox/109.0"

[ ! -d "$hist_dir" ] && mkdir -p "$hist_dir"

launcher(){
    fzf --reverse --cycle --prompt "$1"
}

# comprueba si las dependencias est√°n presentes
dep_ch(){
    for dep; do
        command -v "$dep" >/dev/null || die "Program \"$dep\" not found. Please install it."
    done
}
dep_ch "curl" "sed" "grep" "mpv" "fzf" "yt-dlp" "ffmpeg" || true

die() {
    printf "\33[2K\r\033[1;31m%s\033[0m\n" "$*" >&2
    exit 1
}

# aun no funciona esta funcion tratare de terminarla
downloads() {
    local title_m3u8
    local m3u8_part1
    local m3u8_part2
    local mp4
    local links
    [ ! -d "$dir_downloads" ] && mkdir "$dir_downloads"
    [ -n "$1" ] || die "No hay enlace"
    title_m3u8=$(echo "$titleG" | cut -d '/' -f 5 | tr '-' ' ')

    for mp4 in "${@}"; do
        m3u8_part1=$(curl -s "$mp4" | grep m3u8 | cut -d\" -f 2 | sed 's/master\.m3u8.*//')
        m3u8_part2=$(curl -s "$mp4" | grep m3u8 | cut -d\" -f 2 | xargs curl -s | grep index)

        if ffmpeg -protocol_whitelist "file,http,https,tcp,tls" -i "$m3u8_part1$m3u8_part2" -c copy "$dir_downloads/$title_m3u8.mp4"; then
            return 0  # Successful download, return from the function
        fi
    done

    # If the loop completes without a successful download, return failure
    return 1
}

get_links(){
    local get_url
    case "$1" in
        *ver/anime*) get_url=$(printf "%s" "$1" | sed 's#^#https://monoschinos2.com/#' | sed 's#ver/anime#ver#' | tr ' ' '-') ;;
        *ver/dorama*) get_url=$(printf "%s" "$1" | sed 's#^#https://www.doramasyt.com/#' | sed 's#ver/dorama#ver#' | tr ' ' '-') ;;
        *anime*) get_url=$(printf "%s" "$1" | sed 's#^#https://monoschinos2.com/#' | tr ' ' '-') ;;
        *dorama*) get_url=$(printf "%s" "$1" | sed 's#^#https://www.doramasyt.com/#' | tr ' ' '-') ;;
        *episodio*|*/0-9/*|*serie*) get_url=$(printf "%s" "$others_base_url$1" | tr ' ' '-') ;;
    esac
    echo "$get_url"
}

get_episode() {
    case "$1" in
        *anime*) anime=$(curl -s -A "$agent" "$1" | grep episodio | cut -d\" -f 2 | sed 's#^300\s*##' | sed '/^$/d' | sed 's#^https://monoschinos2.com/##' | sed 's/ver\//ver\/anime\//g' | tr '-' ' ' ) ;;
        *dorama*) dorama=$(curl -s -A "$agent" "$1" | grep episodio | cut -d\" -f 2 | sed 's#^https://www.doramasyt.com/##' | sed 's/ver\//ver\/dorama\//g'  | tr '-' ' ') ;;
        *serie*) title=$(echo "$1" | cut -d '/' -f 5)
            serie=$(curl -s -A "$agent" "$1" | grep episodio | grep "$title" | cut -d\" -f 2 | tr '-' ' ') ;;
        *pelicula*|*) movie=$1 ;;
    esac

    selecte=$(printf "%s" "$anime" "$dorama" "$serie" "$movie" | launcher $'\e[1;35müé• Selecciona una opci√≥n:\e[0m ' \
        --preview-window=up:30% --preview 'echo {}')
    if [[ "$selecte" == *"serie"* || "$selecte" == *"episodio"* || "$selecte" == *"ver"* || "$selecte" == *"anime"* ]]; then
        episode_list=$(get_links "$selecte")
        echo "$episode_list"
    else
        movies_list=$movie
        echo "$movies_list"
    fi
}

search_global(){
    local anime_url="${anime_base_url}${spn_search_endpoint}$1"
    results_anime=$(curl -s -A "$agent" "$anime_url" | grep "$1" | grep href | cut -d\" -f 2 | tr '-' ' ' | sed 's#^https://monoschinos2.com/##')
    local dorama_url="${doramas_base_url}${spn_search_endpoint}$1"
    results_dorama=$( curl -s -A "$agent" "$dorama_url" | grep "dorama/" | cut -d\" -f 2 | sed 's#^https://www.doramasyt.com/##' |  tr '-' ' ' )
    local others_url="${others_base_url}${eng_search_endpoint}$1"
    results_others=$(curl -s "$agent" "$others_url" | grep "$1" | grep href | cut -d\" -f 2 | tr '-' ' ' )

    if [ -n "$results_anime" ]; then
        echo "$results_anime"
    fi

    if [ -n "$results_dorama" ]; then
        echo "$results_dorama"
    fi

    if [ -n "$results_others" ]; then
        echo "$results_others"
    fi

}

get_video_links() {
    local video_links=()
    local links_decoders=()
    local excluded_sites=("filemoon" "dood" "azipcd")

    case "$1" in
        *ver*|*anime*)
            mapfile -t links_decoders < <(curl -s -A "$agent" "$1" | grep -o 'data-player="[^"]*"' | awk -F'"' '{print $2}')

            for link in "${links_decoders[@]}"; do
                decoded_link=$(printf "%s\n" "$link" | base64 -d | cut -d '=' -f 2)
                excluded=false

                for site in "${excluded_sites[@]}"; do
                    if [[ $decoded_link == *"$site"* ]]; then
                        excluded=true
                        break
                    fi
                done

                if [ "$excluded" = false ]; then
                    video_links+=("$decoded_link")
                fi
            done
            ;;
        *)
            mapfile -t video_links < <(curl -s -A "$agent" "$1" | grep -o 'data-video="[^"]*"' | awk '!/dood|azipcdn|pelisplay/' | awk -F'"' '{print $2}')
            ;;
    esac

    for m3u8 in "${video_links[@]}"; do

        bool=false
        yt-dlp -s "$m3u8" > /dev/null 2>&1 || bool=true

        if [ "$bool" = false ]; then
            video_links_check=$m3u8
            break
        fi
    done

    echo "$video_links_check"
}

replay() {
    local link
    local title
    title=$(echo "$titleG" | cut -d '/' -f 5 | tr '-' ' ')
    if nohup mpv --title="$title" "$1" >/dev/null 2>&1 &
    then
        history save "$result_url"
    fi
}

next(){
    local video_links
    local title
    local links
    title=$(echo "$1" | cut -d '/' -f5 | tr -d '0-9' | cut -d '-' -f 1)
    case "$1" in
        *monoschinos2*) next_episode=$(curl -s -A "$agent" "$1" | grep "$title" | cut -d\" -f 2 | uniq -d ) ;;
        *cuevana3*) cuevana3_link=$(curl -s -A "$agent" "$1" | grep "$title" | grep -i Siguiente | cut -d\" -f 2)
            next_episode=$(get_links "$cuevana3_link") ;;
        *doramasyt*) next_episode=$(curl -s -A "$agent" "$1" | grep Siguiente | cut -d\" -f 4 ) ;;
    esac
    result_url=$next_episode
    if [ -n "$result_url" ];
    then
        titleG="$next_episode"
        links=$(get_video_links "$next_episode")
        [ -n "$links" ] || die "no hay enlaces disponible"
        replay "$links"
    else
        change_episode
    fi
}

change_episode(){
    local links
    result_url=$(get_episode "$get_url")
    links=$(get_video_links "$result_url")
    titleG=$result_url
    replay "$links"

}

play() {
    local options=("Siguiente" "Reproducir" "Descargar" "Cambiar episodio" "Salir")
    local choice
    replay "${@}"
    while true; do
        title=$(echo "$titleG" | cut -d '/' -f 5 | tr '-' ' ')
        choice=$(printf '%s\n' "${options[@]}" | launcher $'\e[1;33müé¨ Reproduciendo '"$title"$' :\e[0m ')
        case "$choice" in
            'Reproducir') replay "$1" ;;
            'Siguiente') next "$titleG" ;;
            'Descargar') downloads "$1" ;;
            'Cambiar episodio') change_episode ;;
            'Salir') exit 0 ;;
        esac
    done
}

last_viewed(){
    local links
    if [ -f "$histfile" ];
    then
        result_url=$(cat "$histfile")
        titleG=$(echo "$result_url" | cut -d '/' -f 5 | tr '-' ' ')
        links=$(get_video_links "$result_url")
        replay "$links"
    else
        die "no hay ultima vez"
    fi
}

history(){
    local animes
    local doramas
    local others
    local choice
    case "$1" in
        'save') if ! grep -Fxq "$2" "$history";
            then
                echo "$2" >> "$history"
            fi ;;
        'show') if [ -f "$history" ];
            then
                show_history=$(cat "$history")
                animes=$( echo "$show_history" | grep "monoschinos2" |  cut -d\" -f 2 | sed 's#^300\s*##' | sed '/^$/d' | sed 's#^https://monoschinos2.com/##' | sed 's/ver\//ver\/anime\//g' | tr '-' ' ')
                others=$(echo "$show_history" | grep "cuevana3" | awk -F '/' '{print "/" $4 "/" $5 }' | tr '-' ' ')
                doramas=$(echo "$show_history" | grep "doramasyt" | cut -d\" -f 2 | sed 's#^https://www.doramasyt.com/##' | sed 's/ver\//ver\/dorama\//g'  | tr '-' ' ' )
                choice=$(printf '%s\n' "$animes" "$doramas" "$others" | launcher $'\e[1;35müîç Selecciona una opci√≥n:\e[0m ')
                result_url=$(get_links "$choice")
                links=$(get_video_links "$result_url")
                [ -n "$links" ] || die "no hay enlaces disponible"
                titleG=$result_url
                play "$links"
            fi ;;
    esac
}

main() {
    local choice
    local title
    local links
    clear
    printf "\33[2K\r\033[1;36mBuscar: \033[0m" && read -r query
    query=$(printf "%s" "$query" | sed "s| |+|g")
    links=$(search_global "$query")
    [ -n "$links" ] || die "No se encontraron resultados"
    choice=$(printf "%s" "$links" | launcher $'\e[1;33müåü Elige una pel√≠cula, serie o dorama:\e[0m ' \
        --preview-window=up:20% --preview 'echo {}')
    get_url=$(get_links "$choice")
    title=$(echo "$get_url" | cut -d '/' -f5 | tr '-' ' ')
    result_url=$(get_episode "$get_url")
    [ -n "$result_url" ] || die "No hay episodios disponibles"
    links=$(get_video_links "$result_url")
    [ -n "$links" ] || die "No hay enlaces disponibles"
    titleG="$result_url"
    play "$links"
}

menu() {
    local options=("Buscar" "√öltimo visto" "Historial" "Salir")
    local choice

    choice=$(printf '%s\n' "${options[@]}" | launcher $'\e[1;35müîç Selecciona una opci√≥n:\e[0m ')
    while true; do
        case "$choice" in
            "Buscar") main ;;
            "√öltimo visto") last_viewed ;;
            "Historial") history show ;;
            "Salir") break ;;
            *) die "Opci√≥n inv√°lida. Int√©ntalo de nuevo." ;;
        esac
    done
}
menu
